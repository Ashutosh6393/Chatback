generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // SaaS related
  subscription Subscription?
  credits      Int           @default(100) // number of messages/user interactions allowed
  creditsUsed  Int           @default(0)

  agents       Agent[]
  chatMessages ChatMessage[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Subscription {
  id               String    @id @default(cuid())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String    @unique
  plan             String // "free","hobby" "pro", "enterprise"
  priceId          String? // Stripe price id (if using Stripe)
  status           String // "active", "canceled", etc.
  startedAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  currentPeriodEnd DateTime?
}

model Agent {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // sources of knowledge
  size       Int       @default(0) // number of documents indexed
  pdfUrls    String[] // S3/Cloud links to PDFs
  webLinks   String[] // List of URLs
  qnaSource  String? // Optional path to QnA CSV
  textSource String? // Optional text source
  apiKey     String    @unique
  isTrained  Boolean   @default(false)
  trainingAt DateTime?

  usage AgentUsage?
  chats ChatMessage[]
  Qna   Qna[]
}

model Qna {
  id        String   @id @default(cuid())
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   String
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentId, question])
}

model AgentUsage {
  id            String    @id @default(cuid())
  agent         Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId       String    @unique
  totalRequests Int       @default(0)
  lastUsedAt    DateTime?
}

model ChatMessage {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  role      Role // "user" | "assistant"
  content   String
  createdAt DateTime @default(now())
}

enum Role {
  user
  assistant
}
